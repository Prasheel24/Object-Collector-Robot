<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classastar__plugin_1_1_a_star_planner" kind="class" language="C++" prot="public">
    <compoundname>astar_plugin::AStarPlanner</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BaseGlobalPlanner</basecompoundref>
    <includes refid="path_planner_8hpp" local="no">pathPlanner.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1afb117804426fe5f1a9a882a0da06047a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="82" column="1" bodyfile="include/pathPlanner.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a5edf65eab6aa9be80520ebbcaa9e6704" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::mapSize</definition>
        <argsstring></argsstring>
        <name>mapSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="83" column="1" bodyfile="include/pathPlanner.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a205a9cf7b62779627bf89c8b0d78f391" prot="public" static="no" mutable="no">
        <type>bool *</type>
        <definition>bool* astar_plugin::AStarPlanner::occupancyGridMap</definition>
        <argsstring></argsstring>
        <name>occupancyGridMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="84" column="1" bodyfile="include/pathPlanner.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a0d9b3ad5c3a83a96192609939af84c3d" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::infinity</definition>
        <argsstring></argsstring>
        <name>infinity</name>
        <initializer>= std::numeric_limits&lt;float&gt;::infinity()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="85" column="1" bodyfile="include/pathPlanner.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1aae46db226358860bb296612e97a67617" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::tBreak</definition>
        <argsstring></argsstring>
        <name>tBreak</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="86" column="1" bodyfile="include/pathPlanner.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1ab20d703c7c32c96a523295cf07f8ef99" prot="public" static="no" mutable="no">
        <type>ros::NodeHandle</type>
        <definition>ros::NodeHandle astar_plugin::AStarPlanner::ROSNodeHandle</definition>
        <argsstring></argsstring>
        <name>ROSNodeHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="87" column="1" bodyfile="include/pathPlanner.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a9accb42a886464ae84db5259aad9c444" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::originX</definition>
        <argsstring></argsstring>
        <name>originX</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="88" column="1" bodyfile="include/pathPlanner.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1aa680b5cf31ff141738c409c4e86dbba6" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::originY</definition>
        <argsstring></argsstring>
        <name>originY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="89" column="1" bodyfile="include/pathPlanner.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a698245ae6075cbbcb7d50d949025df95" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::resolution</definition>
        <argsstring></argsstring>
        <name>resolution</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="90" column="1" bodyfile="include/pathPlanner.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a1be22c40d97241edb0a60b7bd3c332f3" prot="public" static="no" mutable="no">
        <type>costmap_2d::Costmap2DROS *</type>
        <definition>costmap_2d::Costmap2DROS* astar_plugin::AStarPlanner::costmap_ros</definition>
        <argsstring></argsstring>
        <name>costmap_ros</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="91" column="1" bodyfile="include/pathPlanner.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1afeaa9448af26fc54e8adb0a906bd6324" prot="public" static="no" mutable="no">
        <type>costmap_2d::Costmap2D *</type>
        <definition>costmap_2d::Costmap2D* astar_plugin::AStarPlanner::costmap</definition>
        <argsstring></argsstring>
        <name>costmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="92" column="1" bodyfile="include/pathPlanner.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a3befa689d0be167cbde58b71c635f5ae" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool astar_plugin::AStarPlanner::initialized</definition>
        <argsstring></argsstring>
        <name>initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="93" column="1" bodyfile="include/pathPlanner.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1a712676c797f8a99a81b7aa48e02d227b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="94" column="1" bodyfile="include/pathPlanner.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classastar__plugin_1_1_a_star_planner_1ad3806c8e75f4008de6b4ba1a1cbd2c42" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::height</definition>
        <argsstring></argsstring>
        <name>height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="95" column="1" bodyfile="include/pathPlanner.hpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a709090708527da7d103f7c9373f4b651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>astar_plugin::AStarPlanner::AStarPlanner</definition>
        <argsstring>()</argsstring>
        <name>AStarPlanner</name>
        <briefdescription>
<para>Constructor of class AStar planner. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="102" column="1" bodyfile="src/pathPlanner.cpp" bodystart="77" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a79cd3d4231e807ccc04f70d1e4ecd837" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>astar_plugin::AStarPlanner::AStarPlanner</definition>
        <argsstring>(ros::NodeHandle &amp;)</argsstring>
        <name>AStarPlanner</name>
        <param>
          <type>ros::NodeHandle &amp;</type>
          <defname>nh</defname>
        </param>
        <briefdescription>
<para>Overloaded constructor to call ros node handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ros::NodeHandle</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="109" column="1" bodyfile="src/pathPlanner.cpp" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a6eaf79c8595c501e03117436fd499e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>astar_plugin::AStarPlanner::AStarPlanner</definition>
        <argsstring>(std::string name, costmap_2d::Costmap2DROS *costmap_ros)</argsstring>
        <name>AStarPlanner</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>costmap_2d::Costmap2DROS *</type>
          <declname>costmap_ros</declname>
        </param>
        <briefdescription>
<para>Overloaded constructor to initialise 2D cost map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>costmap_2d::Costmap2DROS</parametername>
<parametername>ROS</parametername>
</parameternamelist>
<parameterdescription>
<para>2D cost map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="117" column="1" bodyfile="src/pathPlanner.cpp" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1abd555da48b7cb20f1fef16962ac0a71c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void astar_plugin::AStarPlanner::initialize</definition>
        <argsstring>(std::string name, costmap_2d::Costmap2DROS *costmap_ros)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>costmap_2d::Costmap2DROS *</type>
          <declname>costmap_ros</declname>
        </param>
        <briefdescription>
<para>Function inherited from base class to initialise map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>costmap_2d::Costmap2DROS</parametername>
<parametername>ROS</parametername>
</parameternamelist>
<parameterdescription>
<para>2D cost map </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="125" column="1" bodyfile="src/pathPlanner.cpp" bodystart="91" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a0452b64fca4b454fad7da2249494a9fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool astar_plugin::AStarPlanner::makePlan</definition>
        <argsstring>(const geometry_msgs::PoseStamped &amp;start, const geometry_msgs::PoseStamped &amp;goal, std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;plan)</argsstring>
        <name>makePlan</name>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const geometry_msgs::PoseStamped &amp;</type>
          <declname>goal</declname>
        </param>
        <param>
          <type>std::vector&lt; geometry_msgs::PoseStamped &gt; &amp;</type>
          <declname>plan</declname>
        </param>
        <briefdescription>
<para>Function to make a plan to reach the goal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry_msgs::PoseStamped, start pose </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>const</parametername>
</parameternamelist>
<parameterdescription>
<para>geometry_msgs::PoseStamped, goal pose </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::vector&lt;geometry_msgs::PoseStamped&gt;</parametername>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>plan to reach </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool, returns true if plan exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="134" column="1" bodyfile="src/pathPlanner.cpp" bodystart="159" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a70e9cb8c51872dd8f83d1ae4a7006c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; astar_plugin::AStarPlanner::runAStar</definition>
        <argsstring>(int startCell, int goalCell)</argsstring>
        <name>runAStar</name>
        <param>
          <type>int</type>
          <declname>startCell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>goalCell</declname>
        </param>
        <briefdescription>
<para>Function to run astar algorithm. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;int&gt;, returns best path coordinates </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="143" column="1" bodyfile="src/pathPlanner.cpp" bodystart="288" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a65c23083aa562f0ce8a881d26fb020a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; astar_plugin::AStarPlanner::findPath</definition>
        <argsstring>(int startCell, int goalCell, std::vector&lt; float &gt; g_score)</argsstring>
        <name>findPath</name>
        <param>
          <type>int</type>
          <declname>startCell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>goalCell</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>g_score</declname>
        </param>
        <briefdescription>
<para>Function to find path to reach the goal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::vector&lt;float&gt;</parametername>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>function value for each cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;int&gt;, if correct, then best path else empty path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="152" column="1" bodyfile="src/pathPlanner.cpp" bodystart="297" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1aae75ccdcf38f6cd848d024a8aebc0bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; astar_plugin::AStarPlanner::constructPath</definition>
        <argsstring>(int startCell, int goalCell, std::vector&lt; float &gt; g_score)</argsstring>
        <name>constructPath</name>
        <param>
          <type>int</type>
          <declname>startCell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>goalCell</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>g_score</declname>
        </param>
        <briefdescription>
<para>Function to construct a path to reach the goal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::vector&lt;float&gt;</parametername>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>function value for each cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;int&gt;, if correct, then best path else empty path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="162" column="1" bodyfile="src/pathPlanner.cpp" bodystart="342" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a875990bd4b8b9ab17855ce54b4df4780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; astar_plugin::AStarPlanner::getMapCoordinates</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>getMapCoordinates</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Function to get map coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>float</parametername>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>float</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; returns map coordinates </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="171" column="1" bodyfile="src/pathPlanner.cpp" bodystart="254" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a18fac92699522fa76a2add6ea75fa6fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::calculateHCellScore</definition>
        <argsstring>(int cellIndex, int cellSquare)</argsstring>
        <name>calculateHCellScore</name>
        <param>
          <type>int</type>
          <declname>cellIndex</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cellSquare</declname>
        </param>
        <briefdescription>
<para>Function to calculate H cell score. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>index value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>limits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float, H value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="179" column="1" bodyfile="src/pathPlanner.cpp" bodystart="469" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1aa54d997cd223de69fb7a37a79dc5cd1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::calculateCellIndex</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>calculateCellIndex</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Function to calculate cell index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>y value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>x value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int, cell index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="187" column="1" bodyfile="src/pathPlanner.cpp" bodystart="478" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a660c014cd14a8de3080b138b44f5437e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::getCellRowIndex</definition>
        <argsstring>(int index)</argsstring>
        <name>getCellRowIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function to get Cell Row index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>index value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int, cell row index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="194" column="1" bodyfile="src/pathPlanner.cpp" bodystart="482" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a7242cadadc720feb8af97bc9f427f53c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::getCellColIndex</definition>
        <argsstring>(int index)</argsstring>
        <name>getCellColIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function to get Cell Column index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>index value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int, cell column index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="201" column="1" bodyfile="src/pathPlanner.cpp" bodystart="486" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a29d81e8f4ac6191296d5c180be9ac8ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool astar_plugin::AStarPlanner::isCellFree</definition>
        <argsstring>(int cellIndex)</argsstring>
        <name>isCellFree</name>
        <param>
          <type>int</type>
          <declname>cellIndex</declname>
        </param>
        <briefdescription>
<para>Function to check if the cell is free. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>index value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool, returns true if free </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="208" column="1" bodyfile="src/pathPlanner.cpp" bodystart="495" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1ae8f5105e002f679874c3d55815fe30ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool astar_plugin::AStarPlanner::isCellFree</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>isCellFree</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Overloaded function to check if cell is free. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>x value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>cell</parametername>
</parameternamelist>
<parameterdescription>
<para>y value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool, returns true if free </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="216" column="1" bodyfile="src/pathPlanner.cpp" bodystart="490" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1ad07f32fd3a1e44ef3bb9bb1e59237023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::getMoveToCellCost</definition>
        <argsstring>(int cellIndex1, int cellIndex2)</argsstring>
        <name>getMoveToCellCost</name>
        <param>
          <type>int</type>
          <declname>cellIndex1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cellIndex2</declname>
        </param>
        <briefdescription>
<para>Function to get moving cost to a cell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>cell index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>cell index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float, cell cost </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="224" column="1" bodyfile="src/pathPlanner.cpp" bodystart="460" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a2f19049be7428c445b7159cc111b4401" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float astar_plugin::AStarPlanner::getMoveToCellCost</definition>
        <argsstring>(int i1, int j1, int i2, int j2)</argsstring>
        <name>getMoveToCellCost</name>
        <param>
          <type>int</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j2</declname>
        </param>
        <briefdescription>
<para>Overloaded function to get moving cost to a cell. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>cell x index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>cell y index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>cell x index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>cell y index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float, cell cost </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="234" column="1" bodyfile="src/pathPlanner.cpp" bodystart="444" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a5ea485f93bfba47034d611b04eba2189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; astar_plugin::AStarPlanner::findFreeNeighborCell</definition>
        <argsstring>(int cellIndex)</argsstring>
        <name>findFreeNeighborCell</name>
        <param>
          <type>int</type>
          <declname>cellIndex</declname>
        </param>
        <briefdescription>
<para>Function to find free neighbouring cell to traverse. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>previous</parametername>
</parameternamelist>
<parameterdescription>
<para>cell index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;int&gt;, new cell indices </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="241" column="1" bodyfile="src/pathPlanner.cpp" bodystart="391" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1ac43f501b17770643240a6e36174a73b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void astar_plugin::AStarPlanner::convertToMapCoordinates</definition>
        <argsstring>(float &amp;x, float &amp;y)</argsstring>
        <name>convertToMapCoordinates</name>
        <param>
          <type>float &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Function to convert coordinates into a static map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="249" column="1" bodyfile="src/pathPlanner.cpp" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1aae9903fa7f48e8e1ce45f4c772989e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int astar_plugin::AStarPlanner::getCellIndex</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>getCellIndex</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Function to get cell index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int, index of cell </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="257" column="1" bodyfile="src/pathPlanner.cpp" bodystart="260" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1add9c03d5a079ad44e5f91ccc8344679d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void astar_plugin::AStarPlanner::getCellCoordinates</definition>
        <argsstring>(int index, float &amp;x, float &amp;y)</argsstring>
        <name>getCellCoordinates</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Function to get cell coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>float</parametername>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>float</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="266" column="1" bodyfile="src/pathPlanner.cpp" bodystart="269" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a3e3717511d9000f1c55f3f57a58dfd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool astar_plugin::AStarPlanner::isCoordinateInBounds</definition>
        <argsstring>(float x, float y)</argsstring>
        <name>isCoordinateInBounds</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Function to check whether given coordinates are under boundary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool, returns true if inside boundary </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="274" column="1" bodyfile="src/pathPlanner.cpp" bodystart="279" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a2d44c51604b31cd5f7e8599520ae3645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void astar_plugin::AStarPlanner::addNeighborCellToOpenList</definition>
        <argsstring>(std::set&lt; GridSquare &gt; &amp;OPL, int neighborCell, int goalCell, std::vector&lt; float &gt; g_score)</argsstring>
        <name>addNeighborCellToOpenList</name>
        <param>
          <type>std::set&lt; <ref refid="class_grid_square" kindref="compound">GridSquare</ref> &gt; &amp;</type>
          <declname>OPL</declname>
        </param>
        <param>
          <type>int</type>
          <declname>neighborCell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>goalCell</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>g_score</declname>
        </param>
        <briefdescription>
<para>Function to add nearest neighbor to open list of coordinates. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>std::set&lt;GridSquare&gt;</parametername>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>of coordinates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>neighbour</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::vector&lt;float&gt;</parametername>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>g function value for cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="284" column="1" bodyfile="src/pathPlanner.cpp" bodystart="379" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classastar__plugin_1_1_a_star_planner_1a755e2c8b550458a1c4640a86fca1d993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool astar_plugin::AStarPlanner::isStartAndGoalValid</definition>
        <argsstring>(int startCell, int goalCell)</argsstring>
        <name>isStartAndGoalValid</name>
        <param>
          <type>int</type>
          <declname>startCell</declname>
        </param>
        <param>
          <type>int</type>
          <declname>goalCell</declname>
        </param>
        <briefdescription>
<para>Function to check if the start and end goal are valid. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>int</parametername>
<parametername>goal</parametername>
</parameternamelist>
<parameterdescription>
<para>cell </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool, returns true if valid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/pathPlanner.hpp" line="295" column="1" bodyfile="src/pathPlanner.cpp" bodystart="414" bodyend="442"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="0">
        <label>astar_plugin::AStarPlanner</label>
        <link refid="classastar__plugin_1_1_a_star_planner"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>nav_core::BaseGlobalPlanner</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>astar_plugin::AStarPlanner</label>
        <link refid="classastar__plugin_1_1_a_star_planner"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>nav_core::BaseGlobalPlanner</label>
      </node>
    </collaborationgraph>
    <location file="include/pathPlanner.hpp" line="80" column="1" bodyfile="include/pathPlanner.hpp" bodystart="80" bodyend="296"/>
    <listofallmembers>
      <member refid="classastar__plugin_1_1_a_star_planner_1a2d44c51604b31cd5f7e8599520ae3645" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>addNeighborCellToOpenList</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a709090708527da7d103f7c9373f4b651" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>AStarPlanner</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a79cd3d4231e807ccc04f70d1e4ecd837" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>AStarPlanner</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a6eaf79c8595c501e03117436fd499e42" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>AStarPlanner</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1aa54d997cd223de69fb7a37a79dc5cd1c" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>calculateCellIndex</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a18fac92699522fa76a2add6ea75fa6fc" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>calculateHCellScore</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1aae75ccdcf38f6cd848d024a8aebc0bc0" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>constructPath</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1ac43f501b17770643240a6e36174a73b9" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>convertToMapCoordinates</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1afeaa9448af26fc54e8adb0a906bd6324" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>costmap</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a1be22c40d97241edb0a60b7bd3c332f3" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>costmap_ros</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a5ea485f93bfba47034d611b04eba2189" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>findFreeNeighborCell</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a65c23083aa562f0ce8a881d26fb020a7" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>findPath</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a7242cadadc720feb8af97bc9f427f53c" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getCellColIndex</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1add9c03d5a079ad44e5f91ccc8344679d" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getCellCoordinates</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1aae9903fa7f48e8e1ce45f4c772989e95" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getCellIndex</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a660c014cd14a8de3080b138b44f5437e" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getCellRowIndex</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a875990bd4b8b9ab17855ce54b4df4780" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getMapCoordinates</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1ad07f32fd3a1e44ef3bb9bb1e59237023" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getMoveToCellCost</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a2f19049be7428c445b7159cc111b4401" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>getMoveToCellCost</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1ad3806c8e75f4008de6b4ba1a1cbd2c42" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>height</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a0d9b3ad5c3a83a96192609939af84c3d" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>infinity</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1abd555da48b7cb20f1fef16962ac0a71c" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>initialize</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a3befa689d0be167cbde58b71c635f5ae" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>initialized</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a29d81e8f4ac6191296d5c180be9ac8ae" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>isCellFree</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1ae8f5105e002f679874c3d55815fe30ad" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>isCellFree</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a3e3717511d9000f1c55f3f57a58dfd0f" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>isCoordinateInBounds</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a755e2c8b550458a1c4640a86fca1d993" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>isStartAndGoalValid</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a0452b64fca4b454fad7da2249494a9fd" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>makePlan</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a5edf65eab6aa9be80520ebbcaa9e6704" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>mapSize</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a205a9cf7b62779627bf89c8b0d78f391" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>occupancyGridMap</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a9accb42a886464ae84db5259aad9c444" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>originX</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1aa680b5cf31ff141738c409c4e86dbba6" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>originY</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a698245ae6075cbbcb7d50d949025df95" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>resolution</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1ab20d703c7c32c96a523295cf07f8ef99" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>ROSNodeHandle</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a70e9cb8c51872dd8f83d1ae4a7006c62" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>runAStar</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1aae46db226358860bb296612e97a67617" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>tBreak</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1afb117804426fe5f1a9a882a0da06047a" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>value</name></member>
      <member refid="classastar__plugin_1_1_a_star_planner_1a712676c797f8a99a81b7aa48e02d227b" prot="public" virt="non-virtual"><scope>astar_plugin::AStarPlanner</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
